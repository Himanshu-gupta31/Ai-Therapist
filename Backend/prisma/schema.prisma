// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String? // Optional: add name field
  token         String?
  refresh_token String?
  access_token  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authType      String?
  totalCoins   Int            @default(0)
  habits        Habit[]
  coins         Coins[]
  dailyPlanner  DailyPlanner[]
}

model Habit {
  id              String        @id @default(uuid())
  habitName       String
  userId          String
  description     String
  streak          Int           @default(0)
  longestStreak   Int           @default(0)
  lastCheckIn     DateTime?
  startingTime    String
  checkInDates    String[]      @default([])
  frequency       String
  duration        Int
  quoteId         String?
  expertiselevel  ExpertiseType
  level           LevelsType?   @default(Very_Easy)
  targets         String?
  goal            String?
  levelUpdatedAt  DateTime?
  suggestedTarget String?
  quote           Quote?        @relation(fields: [quoteId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins           Coins[]
  createdAt       DateTime      @default(now())
}

model DailyPlanner {
  id           String   @id @default(uuid())
  userId       String
  date         DateTime
  planName     String
  endtime      String
  startingtime String
  description  String?
  priority     String
  category     String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([userId, date, startingtime])
}

model Quote {
  id        String    @id @default(uuid())
  text      String
  type      QuoteType
  habits    Habit[]
  createdAt DateTime  @default(now())
}

model Coins {
  id          String   @id @default(uuid())
  userId      String
  amount      Int
  dateAwarded DateTime @default(now())
  habitId     String

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum QuoteType {
  MOTIVATIONAL
  ROAST
}

enum ExpertiseType {
  Beginner
  Intermediate
  Expert
}

enum LevelsType {
  Very_Easy
  Easy
  Medium
  Hard
  Very_Hard
}
